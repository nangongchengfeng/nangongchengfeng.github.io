<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>JVM on 南宫乘风</title>
        <link>https://www.ownit.top/tags/jvm/</link>
        <description>Recent content in JVM on 南宫乘风</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 09 Mar 2025 10:34:57 +0000</lastBuildDate><atom:link href="https://www.ownit.top/tags/jvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>实战复盘：如何用JProfiler在30分钟内解决内存泄漏？</title>
        <link>https://www.ownit.top/p/202503091034/</link>
        <pubDate>Sun, 09 Mar 2025 10:34:57 +0000</pubDate>
        
        <guid>https://www.ownit.top/p/202503091034/</guid>
        <description>&lt;img src="https://www.ownit.top/title_pic/74.jpg" alt="Featured image of post 实战复盘：如何用JProfiler在30分钟内解决内存泄漏？" /&gt;&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;近日公司有服务内存泄露导致服务假死，导致服务不可用。第一时间查看异常日志，并未发现什么异常，但是进入pod发现生成java_pid1.hprof文件。平台的线上环境均配置了jvm参数，在发生OOM时会自动dump出堆转储文件，接下来就要从dump文件入手来定位问题了。&lt;/p&gt;
&lt;h2 id=&#34;项目背景&#34;&gt;项目背景&lt;/h2&gt;
&lt;p&gt;在Java应用开发中，内存溢出（Out Of Memory, OOM）是开发者最常遇到的严重问题之一。OOM通常由以下原因引发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存分配不足：JVM堆内存设置过小，无法应对高并发或复杂业务场景。&lt;/li&gt;
&lt;li&gt;代码漏洞：如内存泄漏（对象无法被GC回收）、大对象未释放、集合类滥用等。&lt;/li&gt;
&lt;li&gt;系统突然的流量增大，原有的可用内存不足以支撑等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当系统突发OOM时，若仅依赖日志定位问题，往往难以快速找到根源。此时，JProfiler作为一款强大的JVM性能分析工具，能够通过内存快照（Dump文件）精准定位问题代码，成为解决问题的关键。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;官方网址：&lt;a class=&#34;link&#34; href=&#34;https://www.ej-technologies.com/jprofiler/download92&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ej-technologies.com/jprofiler/download92&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;JDK版本&lt;/strong&gt;：Java 8+（推荐JDK 11及以上，支持更全面的诊断功能）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JProfiler版本&lt;/strong&gt;：12.0+（支持与IDEA插件集成）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDE&lt;/strong&gt;：IntelliJ IDEA（集成JProfiler插件）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器环境&lt;/strong&gt;：Linux（需配置OOM自动生成Dump文件）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实战步骤从oom到问题定位&#34;&gt;实战步骤：从OOM到问题定位&lt;/h2&gt;
&lt;h3 id=&#34;配置jvm参数生成dump文件&#34;&gt;配置JVM参数生成Dump文件&lt;/h3&gt;
&lt;p&gt;Dump文件 是在OOM内存溢出的时候，自动Dump文件转存快照的，配置JVM参数 ,就能够在发生Out of Memory错误的时候，就是把当前堆栈信息转存为快照Dump文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/test_service_jvmDump.hprof
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;生产
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/home/app.hprof -jar app.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;HeapDumpOnOutOfMemoryError&lt;/code&gt;：触发OOM时生成快照。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HeapDumpPath&lt;/code&gt;：指定快照文件存储路径（需确保目录可写）。
&lt;img src=&#34;https://www.ownit.top/../../image/d9989f58d11443cb9080947016941bd6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;获取并解析dump文件&#34;&gt;获取并解析Dump文件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当OOM发生时，服务器会生成&lt;code&gt;.hprof&lt;/code&gt;文件，下载至本地。&lt;/li&gt;
&lt;li&gt;使用JProfiler打开快照：
&lt;ul&gt;
&lt;li&gt;启动JProfiler，选择 &lt;strong&gt;Open Snapshots&lt;/strong&gt; → &lt;strong&gt;Open a Single Snapshot&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;加载&lt;code&gt;.hprof&lt;/code&gt;文件后，JProfiler会自动解析堆内存结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/22dabdd385ca43998c402dcbb38025b2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
导入成功后可以看到如下界面:
&lt;img src=&#34;https://www.ownit.top/../../image/fe54c7e9c32748a7aa85cb1cd79917b9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;jprofiler使用-分析大对象来源&#34;&gt;Jprofiler使用 分析大对象来源&lt;/h3&gt;
&lt;p&gt;Jprofile 分析对象,有两个特别重要的信息即 对象的引用信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;incoming references
&lt;ul&gt;
&lt;li&gt;入引用, 显示这个对象被谁引用， 找问题出现的代码位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;outcoming references
&lt;ul&gt;
&lt;li&gt;出引用,显示这个对象引用的其他对象， 找出他有什么，他为什么这么大内存，内存里面存储的是啥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们先预估对象内存大小&lt;/p&gt;
&lt;p&gt;按照Size排序，这个byte[]使用15350次，占用内存1272MB，看着很大
&lt;img src=&#34;https://www.ownit.top/../../image/87ec7547a3d24d7ba83b4ce239ccb0a7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
&lt;strong&gt;Incomming References 入引用,找引用当前对象的对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use select Objects 分析对象引用&lt;/p&gt;
&lt;p&gt;首先 选中对象，点击右键，Use select Objects
&lt;img src=&#34;https://www.ownit.top/../../image/ffea44eed00e49a581dc5037025a8032.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
选择 incoming references 找到对象引用的地方
&lt;img src=&#34;https://www.ownit.top/../../image/8bb5ba6b1afd4a0eaec8c52946631eee.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
逐个分析， 点击show more&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/51b4a662f9bf43a187e80b577a2c45f9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看代码，分析问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/7f28c88cf980464dbe3810e3fa8953a5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;jprofile-大对象寻找法&#34;&gt;Jprofile 大对象寻找法&lt;/h3&gt;
&lt;p&gt;上面我们通过 incomming references ，找对了对象的引用，下面我们我们采用更为直接的方法&lt;/p&gt;
&lt;p&gt;我们都知道内存过高, 无法回收,肯定是内存中堆积的东西多了, 那么我们看下有哪些大对象占用了内存,如何找到大对象?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jprofile提供了Biggest Objects的 查找方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以看到按钮 Biggets OBjects&lt;/li&gt;
&lt;li&gt;直接点击按钮, JProfiler就会显示当前堆栈中有哪些大对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面的基础上进行操作
&lt;img src=&#34;https://www.ownit.top/../../image/ef06fe5ce8304c80814fbb063ecf8881.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
然后点开大对象进行分析, 同样的 Used Selected Objects
&lt;img src=&#34;https://www.ownit.top/../../image/0769d8296a0047b68dba0ea3b5ef699b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
点击Incomming References 查找对象引用信息&lt;/p&gt;
&lt;p&gt;![![在这里插入图片描述](../../image/af4eba6408a6405f86d7a60748234e10.png)
同样的结果, 可以定位到148行代码存在问题
&lt;img src=&#34;https://www.ownit.top/../../image/64a778efb4984fe79c90c00e9fa1d298.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;用graph-查找对象源&#34;&gt;用Graph 查找对象源&lt;/h3&gt;
&lt;p&gt;先查找 Incomming References 找到对象被谁引用
找到想要追查的对象后， 选择User Selected Objects
&lt;img src=&#34;https://www.ownit.top/../../image/ad63a2258dfa49b29c6f4e9a76c50c91.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
&lt;img src=&#34;https://www.ownit.top/../../image/4c942d5082bd4e7cb0f435f3ad818605.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
然后点击 Show In Graph 定位线程及Class信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/1f8f783ebdff46b6b461391d8941f3d6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
然后根据 数据源Heap Walker 定位到问题的Class类信息及具体的行信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/d1c7b532937341489a1f107763fe72ef.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;show-path-to-gc-root-找到创建该方法的位置&#34;&gt;Show Path To GC Root 找到创建该方法的位置&lt;/h3&gt;
&lt;p&gt;选择Use Selected Objects ，选择Imcoming References， 然后点击 Show Path To GC Root&lt;/p&gt;
&lt;p&gt;从创建该对象的方法开始检查，检查所有用到该对象的地方，直到找到泄漏位置&lt;/p&gt;
&lt;p&gt;选择All root， 展示所有的根节点链路信息
&lt;img src=&#34;https://www.ownit.top/../../image/682580cef03242d99eb70898380d8042.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;
定位问题，查阅代码
&lt;img src=&#34;https://www.ownit.top/../../image/1fbb93470a9147c98bec93164779d7dc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过JProfiler分析Dump文件，开发者可以快速定位内存泄漏或大对象问题。关键在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;生成准确的快照&lt;/strong&gt;：确保JVM参数配置正确。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;掌握分析工具的核心功能&lt;/strong&gt;：如引用链追踪、大对象筛选。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结合代码与业务场景&lt;/strong&gt;：避免“治标不治本”的临时修复。&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        
    </channel>
</rss>

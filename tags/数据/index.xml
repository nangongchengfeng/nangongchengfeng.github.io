<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>数据 on 南宫乘风</title>
        <link>https://www.ownit.top/tags/%E6%95%B0%E6%8D%AE/</link>
        <description>Recent content in 数据 on 南宫乘风</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 12 Dec 2019 11:41:16 +0000</lastBuildDate><atom:link href="https://www.ownit.top/tags/%E6%95%B0%E6%8D%AE/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker容器数据卷介绍和命令</title>
        <link>https://www.ownit.top/p/201912121141/</link>
        <pubDate>Thu, 12 Dec 2019 11:41:16 +0000</pubDate>
        
        <guid>https://www.ownit.top/p/201912121141/</guid>
        <description>&lt;img src="https://www.ownit.top/title_pic/17.jpg" alt="Featured image of post Docker容器数据卷介绍和命令" /&gt;&lt;h1 id=&#34;是什么&#34;&gt;是什么&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;一句话：有点类似我们Redis里面的rdb和aof文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先来看看Docker的理念：&lt;/p&gt;
&lt;p&gt;*  将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的&lt;/p&gt;
&lt;p&gt;*  容器之间希望有可能共享数据&lt;/p&gt;
&lt;p&gt;Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，&lt;/p&gt;
&lt;p&gt;那么当容器删除后，数据自然也就没有了。&lt;/p&gt;
&lt;p&gt;为了能保存数据在docker中我们使用卷。&lt;/p&gt;
&lt;h1 id=&#34;能干嘛&#34;&gt;能干嘛&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器的持久化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器间继承+共享数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：&lt;/p&gt;
&lt;p&gt; 卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：数据卷可在容器之间共享或重用数据&lt;/li&gt;
&lt;li&gt;2：卷中的更改可以直接生效&lt;/li&gt;
&lt;li&gt;3：数据卷中的更改不会包含在镜像的更新中&lt;/li&gt;
&lt;li&gt;4：数据卷的生命周期一直持续到没有容器使用它为止&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据卷&#34;&gt;数据卷&lt;/h1&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;直接命令添加&#34;&gt;直接命令添加&lt;/h2&gt;
&lt;h3 id=&#34;1命令&#34;&gt;&lt;strong&gt;1、命令&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -it -v /wei:/wei centos
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;image20191212104146330png&#34;&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212104146330.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/h3&gt;
&lt;h3 id=&#34;2查看数据卷是否挂载成功&#34;&gt;&lt;strong&gt;2、查看数据卷是否挂载成功&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker inspect df6f397beedd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212104551815.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3容器和宿主机之间数据共享&#34;&gt;&lt;strong&gt;3、容器和宿主机之间数据共享&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212104652698.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4容器停止退出后主机修改后数据是否同步完全同步&#34;&gt;&lt;strong&gt;4、容器停止退出后，主机修改后数据是否同步【完全同步】&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212104715515.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;5命令带权限&#34;&gt;&lt;strong&gt;5、命令(带权限)&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;image20191212105055534png&#34;&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212105055534.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/h3&gt;
&lt;h2 id=&#34;dockerfile添加&#34;&gt;DockerFile添加&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、根目录下新建mydocker文件夹并进入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VOLUME[&amp;quot;/dataVolumeContainer&amp;quot;,&amp;quot;/dataVolumeContainer2&amp;quot;,&amp;quot;/dataVolumeContainer3&amp;quot;]&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;出于可移植和分享的考虑，用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。&lt;/p&gt;
&lt;p&gt;由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、File构建&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# volume test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM centos
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;VOLUME &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/dataVolumeContainer1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;/dataVolumeContainer2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;finished,--------success1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212112407408.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、build后生成镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; docker build --f /root/heian -t heian/centos .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;image20191212112428988png&#34;&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212112428988.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;5、run容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212112644761.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、通过上述步骤，容器内的卷目录地址已经知道对应的主机目录地址哪？？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113001978.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;7主机对应默认地址&#34;&gt;7、主机对应默认地址&lt;/h3&gt;
&lt;p&gt;数据完全可以同步&lt;/p&gt;
&lt;h3 id=&#34;备注&#34;&gt;备注&lt;/h3&gt;
&lt;p&gt;Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied&lt;/p&gt;
&lt;p&gt;解决办法：在挂载目录后多加一个&amp;ndash;privileged=true参数即可&lt;/p&gt;
&lt;h1 id=&#34;数据卷容器&#34;&gt;数据卷容器&lt;/h1&gt;
&lt;h2 id=&#34;是什么-1&#34;&gt;是什么&lt;/h2&gt;
&lt;p&gt;命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器&lt;/p&gt;
&lt;h2 id=&#34;总体介绍&#34;&gt;总体介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、以上一步新建的镜像heian/centos为模板并运行容器dc01/dc02/dc03&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、它们已经具有容器卷&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/dataVolumeContainer1&lt;/li&gt;
&lt;li&gt;/dataVolumeContainer2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器间传递共享--volumes-from&#34;&gt;容器间传递共享(&amp;ndash;volumes-from)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、先启动一个父容器dc01，在dataVolumeContainer2新增内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113637576.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、dc02/dc03继承自dc01&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -it --name dc02 --volumes-from dc01 zzyy/centos
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;dc02/dc03分别在dataVolumeContainer2各自新增内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113748430.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、回到dc01可以看到02/03各自添加的都能共享了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113847101.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、删除dc01，dc02修改后dc03可否访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113914777.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、删除dc02后dc03可否访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113937477.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再进一步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212113954142.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、新建dc04继承dc03后再删除dc03&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ownit.top/../../image/20191212114012974.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止&lt;/strong&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
